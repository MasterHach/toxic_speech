import os
import requests
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
import speech_recognition as sr
from pydub import AudioSegment
import tempfile
import io

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = ""
SERVER_URL = "http://localhost:8000/analyze_text"


FFMPEG_PATH = "C:\\Users\\Admin\\Documents\\ffmpeg-2025-10-27-git-68152978b5-full_build\\bin\\ffmpeg.exe"
FFPROBE_PATH = "C:\\Users\\Admin\\Documents\\ffmpeg-2025-10-27-git-68152978b5-full_build\\bin\\ffprobe.exe"

# # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç–∏ –¥–ª—è pydub
import pydub
pydub.AudioSegment.ffmpeg = FFMPEG_PATH
pydub.AudioSegment.ffprobe = FFPROBE_PATH

# # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ PATH
os.environ["PATH"] = os.path.dirname(FFMPEG_PATH) + os.pathsep + os.environ["PATH"]

class AudioToTextBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.recognizer = sr.Recognizer()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()
    
    def setup_handlers(self):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(
            MessageHandler(filters.VOICE, self.handle_voice_message)
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        self.application.add_handler(
            MessageHandler(filters.AUDIO, self.handle_audio_message)
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message)
        )
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç (—Ç–≤–æ—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
            voice_file = await update.message.voice.get_file()
            text = await self.audio_to_text(voice_file.file_path)
            
            if text:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                analysis_result = await self.send_to_server(
                    text, 
                    update.effective_user.id,
                    update.effective_user.username,
                    update.message.chat_id
                )
                
                if analysis_result:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
                    response_message = self.format_analysis_response(text, analysis_result)
                    await update.message.reply_text(response_message, parse_mode='HTML')
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    async def handle_audio_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
        try:
            await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ —Ñ–∞–π–ª...")
            
            audio_file = await update.message.audio.get_file()
            text = await self.audio_to_text(audio_file.file_path)
            
            if text:
                success = await self.send_to_server(text, update.effective_user.id)
                
                if success:
                    await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\nüìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä)"""
        try:
            text = update.message.text
            success = await self.send_to_server(text, update.effective_user.id)
            
            if success:
                await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    async def audio_to_text(self, audio_url: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç"""
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            import urllib.request
            with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as tmp_file:
                urllib.request.urlretrieve(audio_url, tmp_file.name)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV
                audio = AudioSegment.from_ogg(tmp_file.name)
                wav_data = io.BytesIO()
                audio.export(wav_data, format="wav")
                wav_data.seek(0)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
            with sr.AudioFile(wav_data) as source:
                audio_data = self.recognizer.record(source)
                text = self.recognizer.recognize_google(audio_data, language='ru-RU')
                
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(tmp_file.name)
            
            return text
            
        except sr.UnknownValueError:
            return None
        except Exception as e:
            print(f"Error in audio_to_text: {e}")
            return None
    
    async def send_to_server(self, text: str, user_id: int, username: str, chat_id: int) -> dict:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            data = {
                "text": text,
                "user_id": user_id,
                "username": username,
                "chat_id": chat_id
            }
            
            response = requests.post(SERVER_URL, json=data)
            
            if response.status_code == 200:
                result = response.json()
                return result.get('analysis', {})
            else:
                print(f"Server error: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"Error sending to server: {e}")
            return None
        
    def format_analysis_response(self, text: str, analysis: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–µ–∫—Å—Ç–∞"""
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏


        toxic_label = analysis.get('toxicity_level', 'unknown')
        if toxic_label == "0":
            emoji = "üü¢"
        elif toxic_label == "1":
            emoji = "üü°"
        else:
            emoji = "üî¥"
        
        #emoji = toxicity_emojis.get(analysis.get('toxicity_level', 'unknown'), '‚ö™')
        
        response = f"""
            {emoji} <b>–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω</b>

            üìù <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>
            {text}

            üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</b>
            ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: <b>{analysis.get('toxicity_level', 'unknown')}</b>
            ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{analysis.get('category', 'unknown')}</b>
            """
        return response
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling()

if __name__ == "__main__":
    # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    BOT_TOKEN = ""
    
    bot = AudioToTextBot()
    bot.run()
